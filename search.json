[{"path":"https://umccr.github.io/sigrap/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 Peter Diakumis Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://umccr.github.io/sigrap/articles/chord.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"CHORD","text":"CHORD: Classifier HOmologous Recombination Deficiency (https://github.com/UMCUGenetics/CHORD) CHORD random forest model uses relative counts somatic mutation contexts predict homologous recombination deficiency (HRD). primary contexts used CHORD deletions flanking microhomology 1-100kb structural duplications. Additionally, 1-100kb structural duplications used distinguish BRCA1-type HRD BRCA2-type HRD.","code":""},{"path":"https://umccr.github.io/sigrap/articles/chord.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"CHORD","text":"CHORD takes input somatic VCFs containing SNVs, INDELs SVs. former two can VCF. also able take data.frames variants input. Due annotation size processed Manta VCFs, prefer feed pre-processed SV data.frame instead VCF, thus use sigrap::chord_mantavcf2df function.","code":"snvindel_vcf <- system.file(\"extdata/umccrise/snv/somatic-ensemble-PASS.vcf.gz\", package = \"gpgr\") sv_vcf <- system.file(\"extdata/umccrise/sv/manta.vcf.gz\", package = \"gpgr\")"},{"path":"https://umccr.github.io/sigrap/articles/chord.html","id":"analysis","dir":"Articles","previous_headings":"","what":"Analysis","title":"CHORD","text":"","code":"sv_df <- sigrap::chord_mantavcf2df(sv_vcf) # prepare SV VCF as data.frame res <- sigrap::chord_run(   vcf.snv = snvindel_vcf,   df.sv = sv_df,   sv.caller = \"manta\",   # vcf.sv = sv_vcf, # alternative   sample.name = \"sample_A\",   ref.genome = \"hg38\",   verbose = TRUE ) #>  #> #====== Loading variants from vcfs ======# #>  #> ## SNVs #> Warning in fun(libname, pkgname):  #>    No reference genome loaded. Please install and load a BSgenome. #>    For example: #>       install.packages('BiocManager') #>       BiocManager::install('BSgenome.Hsapiens.UCSC.hg19') #>       library('BSgenome.Hsapiens.UCSC.hg19') #>  #>    Then specify the BSgenome to the ref.genome arguemnts to the relevant functions. #>    For example: #>       extractSigsSnv(..., ref.genome=BSgenome.Hsapiens.UCSC.hg19) #> Reading in vcf file... #> Converting chrom name style to style in ref.genome... #> Loading required package: BiocGenerics #>  #> Attaching package: 'BiocGenerics' #> The following objects are masked from 'package:dplyr': #>  #>     combine, intersect, setdiff, union #> The following objects are masked from 'package:stats': #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from 'package:base': #>  #>     anyDuplicated, append, as.data.frame, basename, cbind, colnames, #>     dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep, #>     grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget, #>     order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank, #>     rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply, #>     union, unique, unsplit, which.max, which.min #> Loading required package: S4Vectors #> Loading required package: stats4 #>  #> Attaching package: 'S4Vectors' #> The following objects are masked from 'package:dplyr': #>  #>     first, rename #> The following objects are masked from 'package:base': #>  #>     expand.grid, I, unname #>  #> Attaching package: 'IRanges' #> The following objects are masked from 'package:dplyr': #>  #>     collapse, desc, slice #>  #> ## Indels #> vcf file is the same for both SNVs and indels. Skipping reading vcf for indels #>  #> ## SVs #>  #> #====== Counting mutation contexts ======# #>  #> ## Single base substitutions #> Loading variants... #> Initializing SNV signature output vector... #> Removing rows with multiple ALT sequences... #> Subsetting for SNVs... #> Getting SNV trinucleotide contexts... #> Converting trinucleotide contexts to substitution contexts... #> Counting substitution context occurrences... #> Returning context counts... #>  #> ## Indel contexts (types x lengths) #> Loading variants... #> Removing rows with multiple ALT sequences... #> Determining indel type... #> Initializing indel signature output vector... #> Determining indel length and sequence... #> Determining the start/end positions for the left/right flanks of each indel... #> Retrieving flanking sequences... #> Calculating the number of copies of the indel sequence are present in the 3' flanking sequence... #> Calculating the (max) number of bases that are homologous to the 5'/3' flanking sequence... #> Determining indel contexts... #> Counting indel context occurrences... #> Returning indel context counts... #>  #> ## SV contexts (types x lengths) #> Creating SV type/length lookup table... #> Counting DEL, DUP, and INV context occurrences... #> Counting TRA occurrences... #> Returning SV contexts... #>  #> #====== Exporting output =========# #> output.path not specified. Directly returning output #>"},{"path":"https://umccr.github.io/sigrap/articles/chord.html","id":"results","dir":"Articles","previous_headings":"","what":"Results","title":"CHORD","text":"CHORD results. Sample rows contexts counts.","code":"str(res, list.len = 4) #> List of 2 #>  $ contexts  : num [1, 1:145] 123 82 18 91 92 98 21 94 51 55 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : chr \"sample_A\" #>   .. ..$ : chr [1:145] \"A[C>A]A\" \"A[C>A]C\" \"A[C>A]G\" \"A[C>A]T\" ... #>  $ prediction:'data.frame':  1 obs. of  17 variables: #>   ..$ sample           : chr \"sample_A\" #>   ..$ p_hrd            : num 0.804 #>   ..$ hr_status        : chr \"HR_deficient\" #>   ..$ hrd_type         : chr \"BRCA2_type\" #>   .. [list output truncated]  cbind(var = colnames(res$prediction), value = unlist(res$prediction[1, ])) |>   dplyr::as_tibble(.name_repair = \"check_unique\") |>   knitr::kable(format = \"html\", caption = \"CHORD results.\") # grab first and last few of the contexts col_ind <- c(1:6, (ncol(res$contexts) - 10):ncol(res$contexts)) res$contexts |>   as.data.frame() |>   t() |>   dplyr::as_tibble(rownames = \"context\", .name_repair = \"check_unique\") |>   dplyr::mutate(n = row_number()) |>   dplyr::select(n, dplyr::everything()) |>   dplyr::slice(col_ind) |>   knitr::kable(format = \"html\", caption = \"Sample of rows from contexts counts.\")"},{"path":"https://umccr.github.io/sigrap/articles/chord.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"CHORD","text":"Main packages used vignette. Platform information.","code":""},{"path":"https://umccr.github.io/sigrap/articles/hrdetect.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"HRDetect","text":"HRDetect: Homologous Recombination Deficiency Detect (https://github.com/Nik-Zainal-Group/signature.tools.lib)","code":""},{"path":"https://umccr.github.io/sigrap/articles/hrdetect.html","id":"data","dir":"Articles","previous_headings":"","what":"Data","title":"HRDetect","text":"HRDetect takes input somatic SNV, INDEL, SV CNV files. made somewhat easier feed SNV/INDEL Manta SV VCFs, together PURPLE somatic CNV files, sigrap::hrdetect_run wrapper.","code":"snvindel_vcf <- system.file(\"extdata/umccrise/snv/somatic-ensemble-PASS.vcf.gz\", package = \"gpgr\") sv_vcf <- system.file(\"extdata/umccrise/sv/manta.vcf.gz\", package = \"gpgr\") cnv_tsv <- system.file(\"extdata/purple/purple.cnv.somatic.tsv\", package = \"gpgr\")"},{"path":"https://umccr.github.io/sigrap/articles/hrdetect.html","id":"analysis","dir":"Articles","previous_headings":"","what":"Analysis","title":"HRDetect","text":"","code":"res <- sigrap::hrdetect_run(   nm = \"sample_A\",   snvindel_vcf = snvindel_vcf,   sv_vcf = sv_vcf,   cnv_tsv = cnv_tsv,   genome = \"hg38\",   snvoutdir = tempdir() ) #> [info HRDetect_pipeline] Single Nucleotide Variations #> [info HRDetect_pipeline] Structural Variants (Rearrangements) #> [info HRDetect_pipeline] Some samples in the input data_matrix do not have the exposures for SV3 and SV5, checking if the user supplied SV catalogues or BEDPE files for those samples. #> [info HRDetect_pipeline] Rearrangement signatures exposures will be estiamated for the following samples: sample_A #> [info HRDetect_pipeline] Running Signature fit with 100 bootstraps. Increase sparsity by removing exposures with 5% threshold of total mutations and 0.05 threshold of p-value, i.e. exposure of a signature in a sample is set to zero if the probability of having less than 5% of total mutations assigned to that signature is greather than 0.05. #> [info HRDetect_pipeline] Deletions at Micro-homology (Indels) #> [info HRDetect_pipeline] HRD-LOH index (CNV) #> [info HRDetect_pipeline] Computing HRDetect score and feature contributions for the following samples: sample_A #> [info HRDetect_pipeline] HRDetect pipeline completed!"},{"path":"https://umccr.github.io/sigrap/articles/hrdetect.html","id":"results","dir":"Articles","previous_headings":"","what":"Results","title":"HRDetect","text":"HRDetect results.","code":"cbind(var = colnames(res), value = unlist(res[1, ])) |>   dplyr::as_tibble(.name_repair = \"check_unique\") |>   knitr::kable(format = \"html\", caption = \"HRDetect results.\")"},{"path":"https://umccr.github.io/sigrap/articles/hrdetect.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"HRDetect","text":"Main packages used vignette. Platform information.","code":""},{"path":"https://umccr.github.io/sigrap/articles/mutationalpatterns.html","id":"data-preparation","dir":"Articles","previous_headings":"","what":"Data Preparation","title":"MutationalPatterns","text":"","code":"params <- list(   vcf = system.file(\"extdata/umccrise/snv/somatic-ensemble-PASS.vcf.gz\", package = \"gpgr\"),   nm = \"sampleA\",   outdir = \"outputs\" )  gr <- MutationalPatterns::read_vcfs_as_granges(   vcf_files = params$vcf,   sample_names = params$nm,   genome = ref_genome,   group = \"auto+sex\",   type = \"all\" )"},{"path":[]},{"path":"https://umccr.github.io/sigrap/articles/mutationalpatterns.html","id":"plots","dir":"Articles","previous_headings":"SNVs (SBS)","what":"Plots","title":"MutationalPatterns","text":"","code":"snv_counts <- sigrap::sig_count_snv(vcf_gr = gr, ref_genome = ref_genome) #> Any neighbouring SNVs will be merged into DBS/MBS variants. #> Set the 'predefined_dbs_mbs' to 'TRUE' if you don't want this. p_snvs <- sigrap::sig_plot_snv(   gr_snv = snv_counts$gr_snv, snv_counts = snv_counts$snv_counts,   ref_genome = ref_genome ) p_snvs$p_river + p_snvs$p_heatmap + p_snvs$p_spectrum + p_snvs$p_96_profile + patchwork::plot_layout(ncol = 1) #> Warning: `spread_()` was deprecated in tidyr 1.2.0. #> Please use `spread()` instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated. #> Warning: The `.dots` argument of `group_by()` is deprecated as of dplyr 1.0.0. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated."},{"path":"https://umccr.github.io/sigrap/articles/mutationalpatterns.html","id":"signature-contributions","dir":"Articles","previous_headings":"SNVs (SBS)","what":"Signature Contributions","title":"MutationalPatterns","text":"","code":"sigs_snv_2015 <-   sigrap::cosmic_signatures_2015 |>   {     \\(sigs) sigrap::sig_contribution(mut_mat = snv_counts$snv_counts, signatures = sigs)   }()  sigs_snv_2020 <-   MutationalPatterns::get_known_signatures(     muttype = \"snv\",     incl_poss_artifacts = TRUE   ) |>   {     \\(sigs) sigrap::sig_contribution(mut_mat = snv_counts$snv_counts, signatures = sigs)   }()  sigs_snv_2015 |>   sigrap::sig_contribution_table(type = \"Sig\", outdir = params$outdir) |>   knitr::kable(format = \"html\") |>   kableExtra::kable_styling(c(\"hover\", \"striped\"), font_size = 12) |>   kableExtra::scroll_box(height = \"400px\") sigs_snv_2020 |>   sigrap::sig_contribution_table(type = \"SBS\", outdir = params$outdir) |>   knitr::kable(format = \"html\") |>   kableExtra::kable_styling(c(\"hover\", \"striped\"), font_size = 12) |>   kableExtra::scroll_box(height = \"400px\")"},{"path":[]},{"path":"https://umccr.github.io/sigrap/articles/mutationalpatterns.html","id":"plots-1","dir":"Articles","previous_headings":"DBS","what":"Plots","title":"MutationalPatterns","text":"","code":"dbs_counts <- sigrap::sig_count_dbs(vcf_gr = gr) #> Any neighbouring SNVs will be merged into DBS/MBS variants. #> Set the 'predefined_dbs_mbs' to 'TRUE' if you don't want this. p_dbs <- sigrap::sig_plot_dbs(dbs_counts = dbs_counts) p_dbs$p_dbs_main / p_dbs$p_dbs_cont"},{"path":"https://umccr.github.io/sigrap/articles/mutationalpatterns.html","id":"signature-contributions-1","dir":"Articles","previous_headings":"DBS","what":"Signature Contributions","title":"MutationalPatterns","text":"","code":"sigs_dbs <-   MutationalPatterns::get_known_signatures(muttype = \"dbs\") |>   {     \\(sigs) sigrap::sig_contribution(mut_mat = dbs_counts, signatures = sigs)   }() sigs_dbs |>   sigrap::sig_contribution_table(type = \"DBS\", outdir = params$outdir) |>   knitr::kable(format = \"html\") |>   kableExtra::kable_styling(c(\"hover\", \"striped\"), font_size = 12) |>   kableExtra::scroll_box(height = \"400px\")"},{"path":[]},{"path":"https://umccr.github.io/sigrap/articles/mutationalpatterns.html","id":"plots-2","dir":"Articles","previous_headings":"INDELs","what":"Plots","title":"MutationalPatterns","text":"","code":"indel_counts <- sigrap::sig_count_indel(vcf_gr = gr, ref_genome = ref_genome) p_indels <- sigrap::sig_plot_indel(indel_counts = indel_counts) p_indels$p_indel_main / p_indels$p_indel_cont"},{"path":"https://umccr.github.io/sigrap/articles/mutationalpatterns.html","id":"signature-contributions-2","dir":"Articles","previous_headings":"INDELs","what":"Signature Contributions","title":"MutationalPatterns","text":"","code":"sigs_indel <-   MutationalPatterns::get_known_signatures(muttype = \"indel\") |>   {     \\(sigs) sigrap::sig_contribution(mut_mat = indel_counts, signatures = sigs)   }() sigs_indel |>   sigrap::sig_contribution_table(type = \"ID\", outdir = params$outdir) |>   knitr::kable(format = \"html\") |>   kableExtra::kable_styling(c(\"hover\", \"striped\"), font_size = 12) |>   kableExtra::scroll_box(height = \"400px\")"},{"path":"https://umccr.github.io/sigrap/articles/mutationalpatterns.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"MutationalPatterns","text":"Main packages used vignette. Platform information.","code":""},{"path":"https://umccr.github.io/sigrap/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Peter Diakumis. Author, maintainer.","code":""},{"path":"https://umccr.github.io/sigrap/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Diakumis P (2022). sigrap: Wrappers somatic mutation signature analysis tools. https://umccr.github.io/sigrap/, https://github.com/umccr/sigrap.","code":"@Manual{,   title = {sigrap: Wrappers for somatic mutation signature analysis tools},   author = {Peter Diakumis},   year = {2022},   note = {https://umccr.github.io/sigrap/, https://github.com/umccr/sigrap}, }"},{"path":"https://umccr.github.io/sigrap/index.html","id":"sigrap","dir":"","previous_headings":"","what":"Wrappers for somatic mutation signature analysis tools","title":"Wrappers for somatic mutation signature analysis tools","text":"Wrappers somatic mutation signature analysis tools. See https://umccr.github.io/sigrap/","code":""},{"path":"https://umccr.github.io/sigrap/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Wrappers for somatic mutation signature analysis tools","text":"used inside conda environment:","code":"remotes::install_github(\"umccr/sigrap\") conda install r-sigrap -c umccr -c conda-forge -c bioconda"},{"path":[]},{"path":"https://umccr.github.io/sigrap/index.html","id":"hrdetect","dir":"","previous_headings":"Main Modules","what":"HRDetect","title":"Wrappers for somatic mutation signature analysis tools","text":"Wraps functionality HRDetect framework - see vignette https://umccr.github.io/sigrap/articles/hrdetect.html.","code":""},{"path":"https://umccr.github.io/sigrap/index.html","id":"chord","dir":"","previous_headings":"Main Modules","what":"CHORD","title":"Wrappers for somatic mutation signature analysis tools","text":"Wraps functionality CHORD - see vignette https://umccr.github.io/sigrap/articles/chord.html.","code":""},{"path":"https://umccr.github.io/sigrap/index.html","id":"mutationalpatterns","dir":"","previous_headings":"Main Modules","what":"MutationalPatterns","title":"Wrappers for somatic mutation signature analysis tools","text":"Wraps functionality MutationalPatterns - see vignette https://umccr.github.io/sigrap/articles/mutationalpatterns.html.","code":""},{"path":"https://umccr.github.io/sigrap/index.html","id":"cli-v001","dir":"","previous_headings":"","what":"CLI (v0.0.1)","title":"Wrappers for somatic mutation signature analysis tools","text":"","code":"#------- sigrap -------# $ inst/src/sigrap.R --help usage: sigrap [-h] {hrdetect,chord,mutpat} ...  positional arguments:   {hrdetect,chord,mutpat}                         sub-command help     hrdetect            hrdetect help     chord               chord help     mutpat              mutationalpatterns help  #------- hrdetect -------# $ inst/src/sigrap.R hrdetect --help usage: sigrap hrdetect [-h] --sample SAMPLE --snv SNV --sv SV --cnv CNV                      [--out OUT]  optional arguments:   --sample SAMPLE  Sample name.   --snv SNV        Input SNV (VCF format).   --sv SV          Input SV (VCF format).   --cnv CNV        Input CNV (TSV format).   --out OUT        Output file ['hrdetect.json.gz'].  #------- chord -------# $ inst/src/sigrap.R chord --help usage: sigrap chord [-h] --sample SAMPLE --snv SNV --sv SV [--out OUT]  optional arguments:   --sample SAMPLE  Sample name.   --snv SNV        Input SNV (VCF format).   --sv SV          Input SV (VCF format).   --out OUT        Output file ['chord.json.gz']  #------- mutpat -------# $ inst/src/sigrap.R mutpat --help usage: sigrap mutpat [-h] --sample SAMPLE --snv SNV --outdir OUTDIR  optional arguments:   --sample SAMPLE  Sample name.   --snv SNV        Input SNV file (VCF format).   --outdir OUTDIR  Output directory to write results to"},{"path":"https://umccr.github.io/sigrap/reference/chord_mantavcf2df.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Manta VCF to data.frame — chord_mantavcf2df","title":"Convert Manta VCF to data.frame — chord_mantavcf2df","text":"Converts Manta VCF data.frame processing CHORD.","code":""},{"path":"https://umccr.github.io/sigrap/reference/chord_mantavcf2df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Manta VCF to data.frame — chord_mantavcf2df","text":"","code":"chord_mantavcf2df(in_vcf)"},{"path":"https://umccr.github.io/sigrap/reference/chord_mantavcf2df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Manta VCF to data.frame — chord_mantavcf2df","text":"in_vcf Manta VCF.","code":""},{"path":"https://umccr.github.io/sigrap/reference/chord_mantavcf2df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Manta VCF to data.frame — chord_mantavcf2df","text":"Tibble two columns: sv_type sv_len (INFO/SVTYPE INFO/SVLEN VCF).","code":""},{"path":"https://umccr.github.io/sigrap/reference/chord_mantavcf2df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Manta VCF to data.frame — chord_mantavcf2df","text":"","code":"in_vcf <- system.file(\"extdata/umccrise/sv/manta.vcf.gz\", package = \"gpgr\") d <- chord_mantavcf2df(in_vcf)"},{"path":"https://umccr.github.io/sigrap/reference/chord_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Run CHORD — chord_run","title":"Run CHORD — chord_run","text":"Runs CHORD given SNV SV VCF files. NOTE: make sure BSgenome.Hsapiens.UCSC.hgXX installed.","code":""},{"path":"https://umccr.github.io/sigrap/reference/chord_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run CHORD — chord_run","text":"","code":"chord_run(   vcf.snv = NULL,   vcf.sv = NULL,   df.sv = NULL,   sample.name = NULL,   ref.genome = \"hg38\",   sv.caller = \"manta\",   outpath = NULL,   ... )"},{"path":"https://umccr.github.io/sigrap/reference/chord_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run CHORD — chord_run","text":"vcf.snv Path VCF containing SNVs INDELs. vcf.sv Path VCF containing SVs. df.sv data.frame object containing columns 'SVTYPE' 'SVLEN' Manta SV VCF. sample.name Name sample use. ref.genome Human genome assembly. One 'hg38' (default), 'hg19' 'GRCh37'. sv.caller manta (default) gridss. outpath File write CHORD predictions disk (end '.gz'). specified, results written disk. ... arguments passed CHORD::extractSigsChord().","code":""},{"path":"https://umccr.github.io/sigrap/reference/chord_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run CHORD — chord_run","text":"List extracted signatures HRD prediction.","code":""},{"path":"https://umccr.github.io/sigrap/reference/chord_run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run CHORD — chord_run","text":"","code":"snv <- system.file(\"extdata/umccrise/snv/somatic-ensemble-PASS.vcf.gz\", package = \"gpgr\") sv <- system.file(\"extdata/umccrise/sv/manta.vcf.gz\", package = \"gpgr\") chord_res <- chord_run(   vcf.snv = snv, df.sv = chord_mantavcf2df(sv),   sample.name = \"foo\" ) #> Warning:  #>    No reference genome loaded. Please install and load a BSgenome. #>    For example: #>       install.packages('BiocManager') #>       BiocManager::install('BSgenome.Hsapiens.UCSC.hg19') #>       library('BSgenome.Hsapiens.UCSC.hg19') #>  #>    Then specify the BSgenome to the ref.genome arguemnts to the relevant functions. #>    For example: #>       extractSigsSnv(..., ref.genome=BSgenome.Hsapiens.UCSC.hg19) #> Loading required package: BiocGenerics #>  #> Attaching package: ‘BiocGenerics’ #> The following objects are masked from ‘package:stats’: #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from ‘package:base’: #>  #>     Filter, Find, Map, Position, Reduce, anyDuplicated, append, #>     as.data.frame, basename, cbind, colnames, dirname, do.call, #>     duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted, #>     lapply, mapply, match, mget, order, paste, pmax, pmax.int, pmin, #>     pmin.int, rank, rbind, rownames, sapply, setdiff, sort, table, #>     tapply, union, unique, unsplit, which.max, which.min #> Loading required package: S4Vectors #> Loading required package: stats4 #>  #> Attaching package: ‘S4Vectors’ #> The following objects are masked from ‘package:base’: #>  #>     I, expand.grid, unname #>  #>  #>  # chord_res2 <- chord_run(vcf.snv = snv, vcf.sv = sv, sample.name = \"foo\", #                         outpath = \"nogit/chord_results.json.gz\")"},{"path":"https://umccr.github.io/sigrap/reference/cosmic_signatures_2015.html","id":null,"dir":"Reference","previous_headings":"","what":"Get COSMIC 2015 Signatures — cosmic_signatures_2015","title":"Get COSMIC 2015 Signatures — cosmic_signatures_2015","text":"Get COSMIC 2015 Signatures","code":""},{"path":"https://umccr.github.io/sigrap/reference/cosmic_signatures_2015.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get COSMIC 2015 Signatures — cosmic_signatures_2015","text":"","code":"data(cosmic_signatures_2015)"},{"path":"https://umccr.github.io/sigrap/reference/cosmic_signatures_2015.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Get COSMIC 2015 Signatures — cosmic_signatures_2015","text":"matrix 96 rows (one somatic mutation type within specific context) 30 columns (one signature).","code":""},{"path":"https://umccr.github.io/sigrap/reference/get_genome_obj.html","id":null,"dir":"Reference","previous_headings":"","what":"Get BSgenome Object — get_genome_obj","title":"Get BSgenome Object — get_genome_obj","text":"Gets BSgenome object given human genome assembly string.","code":""},{"path":"https://umccr.github.io/sigrap/reference/get_genome_obj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get BSgenome Object — get_genome_obj","text":"","code":"get_genome_obj(genome = \"hg38\")"},{"path":"https://umccr.github.io/sigrap/reference/get_genome_obj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get BSgenome Object — get_genome_obj","text":"genome Human genome assembly string: hg38 (default), hg19 GRCh37.","code":""},{"path":"https://umccr.github.io/sigrap/reference/get_genome_obj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get BSgenome Object — get_genome_obj","text":"BSgenome object.","code":""},{"path":"https://umccr.github.io/sigrap/reference/get_genome_obj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get BSgenome Object — get_genome_obj","text":"","code":"if (FALSE) { get_genome_obj(\"hg38\") }"},{"path":"https://umccr.github.io/sigrap/reference/hrdetect_prep_cnv.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare PURPLE Somatic CNVs for HRDetect — hrdetect_prep_cnv","title":"Prepare PURPLE Somatic CNVs for HRDetect — hrdetect_prep_cnv","text":"Prepares PURPLE somatic CNVs use HRDetect.","code":""},{"path":"https://umccr.github.io/sigrap/reference/hrdetect_prep_cnv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare PURPLE Somatic CNVs for HRDetect — hrdetect_prep_cnv","text":"","code":"hrdetect_prep_cnv(x, nm = NULL)"},{"path":"https://umccr.github.io/sigrap/reference/hrdetect_prep_cnv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare PURPLE Somatic CNVs for HRDetect — hrdetect_prep_cnv","text":"x Path purple.cnv.somatic.tsv file. nm Sample name.","code":""},{"path":"https://umccr.github.io/sigrap/reference/hrdetect_prep_cnv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare PURPLE Somatic CNVs for HRDetect — hrdetect_prep_cnv","text":"Tibble sample name HRD-LOH index.","code":""},{"path":"https://umccr.github.io/sigrap/reference/hrdetect_prep_cnv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare PURPLE Somatic CNVs for HRDetect — hrdetect_prep_cnv","text":"","code":"x <- system.file(\"extdata/purple/purple.cnv.somatic.tsv\", package = \"gpgr\") (l <- hrdetect_prep_cnv(x, nm = \"SampleA\")) #> # A tibble: 1 × 2 #>   name    hrdloh_index #>   <chr>          <dbl> #> 1 SampleA            0"},{"path":"https://umccr.github.io/sigrap/reference/hrdetect_prep_snvindel.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare VCF with SNVs/INDELs for use with HRDetect — hrdetect_prep_snvindel","title":"Prepare VCF with SNVs/INDELs for use with HRDetect — hrdetect_prep_snvindel","text":"Prepares VCF SNVs/INDELs use HRDetect.","code":""},{"path":"https://umccr.github.io/sigrap/reference/hrdetect_prep_snvindel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare VCF with SNVs/INDELs for use with HRDetect — hrdetect_prep_snvindel","text":"","code":"hrdetect_prep_snvindel(   x,   nm = NULL,   genome = \"hg38\",   outdir = NULL,   sigsToUse = c(1, 2, 3, 5, 6, 8, 13, 17, 18, 20, 26, 30) )"},{"path":"https://umccr.github.io/sigrap/reference/hrdetect_prep_snvindel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare VCF with SNVs/INDELs for use with HRDetect — hrdetect_prep_snvindel","text":"x Path VCF SNVs INDELs. nm Sample name. genome Human genome version (default: hg38. hg19 means GRCh37). outdir Directory output analysis results. sigsToUse COSMIC signatures use.","code":""},{"path":"https://umccr.github.io/sigrap/reference/hrdetect_prep_snvindel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare VCF with SNVs/INDELs for use with HRDetect — hrdetect_prep_snvindel","text":"List two elements: snv_results: tibble exposure score p-value chosen signatures. indel_results: tibble summary count indels proportion.","code":""},{"path":"https://umccr.github.io/sigrap/reference/hrdetect_prep_snvindel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare VCF with SNVs/INDELs for use with HRDetect — hrdetect_prep_snvindel","text":"","code":"x <- system.file(\"extdata/umccrise/snv/somatic-ensemble-PASS.vcf.gz\", package = \"gpgr\") (l <- hrdetect_prep_snvindel(x, nm = \"sampleA\", outdir = tempdir())) #> $snv_results #> # A tibble: 12 × 3 #>    sig          exposure pvalue #>    <chr>           <dbl>  <dbl> #>  1 Signature.1      733.   0    #>  2 Signature.2        0    0.58 #>  3 Signature.3     1795.   0    #>  4 Signature.5      792.   0    #>  5 Signature.6        0    0.95 #>  6 Signature.8     1589.   0    #>  7 Signature.13     391.   0.01 #>  8 Signature.17       0    1    #>  9 Signature.18       0    1    #> 10 Signature.20       0    1    #> 11 Signature.26       0    1    #> 12 Signature.30       0    1    #>  #> $indel_results #> # A tibble: 1 × 12 #>   sample  del.mh del.rep del.none   ins all.indels del.mh.prop del.rep.prop #>   <chr>    <int>   <int>    <int> <int>      <int>       <dbl>        <dbl> #> 1 sampleA    350     156      109   150        615       0.569        0.254 #> # … with 4 more variables: del.none.prop <dbl>, del.mh.count <int>, #> #   del.rep.count <int>, del.none.count <int> #>"},{"path":"https://umccr.github.io/sigrap/reference/hrdetect_prep_sv.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare VCF with SVs for use with HRDetect — hrdetect_prep_sv","title":"Prepare VCF with SVs for use with HRDetect — hrdetect_prep_sv","text":"Prepares VCF SVs use HRDetect.","code":""},{"path":"https://umccr.github.io/sigrap/reference/hrdetect_prep_sv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare VCF with SVs for use with HRDetect — hrdetect_prep_sv","text":"","code":"hrdetect_prep_sv(x, nm = NULL, genome = \"hg38\")"},{"path":"https://umccr.github.io/sigrap/reference/hrdetect_prep_sv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare VCF with SVs for use with HRDetect — hrdetect_prep_sv","text":"x Path VCF SVs. nm Sample name. genome Human genome version (default: hg38. hg19 means GRCh37).","code":""},{"path":"https://umccr.github.io/sigrap/reference/hrdetect_prep_sv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare VCF with SVs for use with HRDetect — hrdetect_prep_sv","text":"Single-column data.frame (rownames) counts SV category.","code":""},{"path":"https://umccr.github.io/sigrap/reference/hrdetect_prep_sv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare VCF with SVs for use with HRDetect — hrdetect_prep_sv","text":"","code":"x <- system.file(\"extdata/umccrise/sv/manta.vcf.gz\", package = \"gpgr\") nm <- \"SampleA\" (d <- hrdetect_prep_sv(x, nm)) #>                             SampleA #> clustered_del_1-10Kb              0 #> clustered_del_10-100Kb            0 #> clustered_del_100Kb-1Mb           0 #> clustered_del_1Mb-10Mb            0 #> clustered_del_>10Mb               0 #> clustered_tds_1-10Kb              0 #> clustered_tds_10-100Kb            0 #> clustered_tds_100Kb-1Mb           0 #> clustered_tds_1Mb-10Mb            0 #> clustered_tds_>10Mb               0 #> clustered_inv_1-10Kb              0 #> clustered_inv_10-100Kb            0 #> clustered_inv_100Kb-1Mb           0 #> clustered_inv_1Mb-10Mb            0 #> clustered_inv_>10Mb               0 #> clustered_trans                   0 #> non-clustered_del_1-10Kb          1 #> non-clustered_del_10-100Kb        0 #> non-clustered_del_100Kb-1Mb       0 #> non-clustered_del_1Mb-10Mb        2 #> non-clustered_del_>10Mb           2 #> non-clustered_tds_1-10Kb          3 #> non-clustered_tds_10-100Kb        1 #> non-clustered_tds_100Kb-1Mb       0 #> non-clustered_tds_1Mb-10Mb        1 #> non-clustered_tds_>10Mb           3 #> non-clustered_inv_1-10Kb         19 #> non-clustered_inv_10-100Kb       19 #> non-clustered_inv_100Kb-1Mb       3 #> non-clustered_inv_1Mb-10Mb        1 #> non-clustered_inv_>10Mb          10 #> non-clustered_trans              18"},{"path":"https://umccr.github.io/sigrap/reference/hrdetect_read_purple_cnv.html","id":null,"dir":"Reference","previous_headings":"","what":"Read PURPLE Somatic CNVs for HRDetect — hrdetect_read_purple_cnv","title":"Read PURPLE Somatic CNVs for HRDetect — hrdetect_read_purple_cnv","text":"Reads PURPLE somatic CNVs use HRDetect.","code":""},{"path":"https://umccr.github.io/sigrap/reference/hrdetect_read_purple_cnv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read PURPLE Somatic CNVs for HRDetect — hrdetect_read_purple_cnv","text":"","code":"hrdetect_read_purple_cnv(x)"},{"path":"https://umccr.github.io/sigrap/reference/hrdetect_read_purple_cnv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read PURPLE Somatic CNVs for HRDetect — hrdetect_read_purple_cnv","text":"x Path purple.cnv.somatic.tsv file.","code":""},{"path":"https://umccr.github.io/sigrap/reference/hrdetect_read_purple_cnv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read PURPLE Somatic CNVs for HRDetect — hrdetect_read_purple_cnv","text":"Tibble containing following columns: chromosome, start, end copyNumber (total) minorAllelePloidy","code":""},{"path":"https://umccr.github.io/sigrap/reference/hrdetect_read_purple_cnv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read PURPLE Somatic CNVs for HRDetect — hrdetect_read_purple_cnv","text":"","code":"x <- system.file(\"extdata/purple/purple.cnv.somatic.tsv\", package = \"gpgr\") (cnv <- hrdetect_read_purple_cnv(x)) #> # A tibble: 59 × 5 #>    Chromosome chromStart  chromEnd total.copy.number.inTumour minor.copy.number… #>    <chr>           <int>     <int>                      <dbl>              <dbl> #>  1 1                   1 123605522                       1.02             0.0184 #>  2 1           123605523 200044314                       1.99             0.989  #>  3 1           200044315 200044570                       2.83             0.993  #>  4 1           200044571 248956422                       2.01             0.993  #>  5 2                   1  93139350                       2.01             0.994  #>  6 2            93139351 219955359                       2.00             0.996  #>  7 2           219955360 225225069                       1.02             0.0196 #>  8 2           225225070 242193529                       2.03             0.990  #>  9 3                   1  92214015                       1.03             0.0176 #> 10 3            92214016 198295559                       2.00             0.992  #> # … with 49 more rows"},{"path":"https://umccr.github.io/sigrap/reference/hrdetect_read_snvindel_vcf.html","id":null,"dir":"Reference","previous_headings":"","what":"Read VCF with SNVs/INDELs for use with HRDetect — hrdetect_read_snvindel_vcf","title":"Read VCF with SNVs/INDELs for use with HRDetect — hrdetect_read_snvindel_vcf","text":"Reads VCF SNVs/INDELs use HRDetect.","code":""},{"path":"https://umccr.github.io/sigrap/reference/hrdetect_read_snvindel_vcf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read VCF with SNVs/INDELs for use with HRDetect — hrdetect_read_snvindel_vcf","text":"","code":"hrdetect_read_snvindel_vcf(x)"},{"path":"https://umccr.github.io/sigrap/reference/hrdetect_read_snvindel_vcf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read VCF with SNVs/INDELs for use with HRDetect — hrdetect_read_snvindel_vcf","text":"x Path VCF.","code":""},{"path":"https://umccr.github.io/sigrap/reference/hrdetect_read_snvindel_vcf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read VCF with SNVs/INDELs for use with HRDetect — hrdetect_read_snvindel_vcf","text":"List containing CHROM, POS, REF ALT columns SNVs INDELs separate tibbles.","code":""},{"path":"https://umccr.github.io/sigrap/reference/hrdetect_read_snvindel_vcf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read VCF with SNVs/INDELs for use with HRDetect — hrdetect_read_snvindel_vcf","text":"","code":"x <- system.file(\"extdata/umccrise/snv/somatic-ensemble-PASS.vcf.gz\", package = \"gpgr\") (l <- hrdetect_read_snvindel_vcf(x)) #> $snv #> # A tibble: 5,944 × 4 #>    chr   position REF   ALT   #>    <chr>    <int> <chr> <chr> #>  1 chr1   1303273 C     T     #>  2 chr1   4932638 C     G     #>  3 chr1   5545493 T     A     #>  4 chr1   6434166 G     T     #>  5 chr1   6654913 C     G     #>  6 chr1   6961437 C     G     #>  7 chr1   7057562 A     T     #>  8 chr1   7945201 A     T     #>  9 chr1  10020499 A     C     #> 10 chr1  10148616 G     A     #> # … with 5,934 more rows #>  #> $indel #> # A tibble: 765 × 4 #>    chr   position REF           ALT   #>    <chr>    <int> <chr>         <chr> #>  1 chr1   3003408 TGCAGAGA      T     #>  2 chr1   3708171 AG            A     #>  3 chr1   4177626 TC            T     #>  4 chr1   8384452 AG            A     #>  5 chr1  13261670 CT            C     #>  6 chr1  16121339 AT            A     #>  7 chr1  37142428 AG            A     #>  8 chr1  52675033 GC            G     #>  9 chr1  56208467 TC            T     #> 10 chr1  56810765 CTTTAACAGAGAT C     #> # … with 755 more rows #>"},{"path":"https://umccr.github.io/sigrap/reference/hrdetect_read_sv_vcf.html","id":null,"dir":"Reference","previous_headings":"","what":"Read VCF with SVs for use with HRDetect — hrdetect_read_sv_vcf","title":"Read VCF with SVs for use with HRDetect — hrdetect_read_sv_vcf","text":"Reads VCF SVs use HRDetect.","code":""},{"path":"https://umccr.github.io/sigrap/reference/hrdetect_read_sv_vcf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read VCF with SVs for use with HRDetect — hrdetect_read_sv_vcf","text":"","code":"hrdetect_read_sv_vcf(x, nm = NULL, genome = \"hg38\")"},{"path":"https://umccr.github.io/sigrap/reference/hrdetect_read_sv_vcf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read VCF with SVs for use with HRDetect — hrdetect_read_sv_vcf","text":"x Path VCF. nm Sample name. genome Human genome version (default: hg38. hg19 means GRCh37).","code":""},{"path":"https://umccr.github.io/sigrap/reference/hrdetect_read_sv_vcf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read VCF with SVs for use with HRDetect — hrdetect_read_sv_vcf","text":"Tibble following BEDPE-like columns: chrom1, start1, end1 chrom2, start2, end2 sample strand1, strand2","code":""},{"path":"https://umccr.github.io/sigrap/reference/hrdetect_read_sv_vcf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read VCF with SVs for use with HRDetect — hrdetect_read_sv_vcf","text":"","code":"x <- system.file(\"extdata/umccrise/sv/manta.vcf.gz\", package = \"gpgr\") sv_bedpe <- hrdetect_read_sv_vcf(x, nm = \"SAMPLE\") head(sv_bedpe) #>   chrom1    start1      end1 chrom2    start2      end2 sample strand1 strand2 #> 1   chr1   2067943   2067948   chr1   2068052   2068057 SAMPLE       +       - #> 2   chr1  51143148  51143153   chr1  51143238  51143243 SAMPLE       +       - #> 3   chr1  92930821  92930825   chr1  92930928  92930932 SAMPLE       +       - #> 4   chr1  93828256  93828270   chr1  93828770  93828784 SAMPLE       +       - #> 5   chr1 100376743 100376746   chr1 100376825 100376828 SAMPLE       +       - #> 6   chr1 164031278 164031280   chr1 164031331 164031333 SAMPLE       +       -"},{"path":"https://umccr.github.io/sigrap/reference/hrdetect_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Run HRDetect via signature.tools.lib — hrdetect_run","title":"Run HRDetect via signature.tools.lib — hrdetect_run","text":"Runs HRDetect described signature.tools.lib repository.","code":""},{"path":"https://umccr.github.io/sigrap/reference/hrdetect_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run HRDetect via signature.tools.lib — hrdetect_run","text":"","code":"hrdetect_run(   nm,   snvindel_vcf,   sv_vcf,   cnv_tsv,   genome = \"hg38\",   snvoutdir = tempdir(),   sigsToUse = c(1, 2, 3, 5, 6, 8, 13, 17, 18, 20, 26, 30),   outpath = NULL )"},{"path":"https://umccr.github.io/sigrap/reference/hrdetect_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run HRDetect via signature.tools.lib — hrdetect_run","text":"nm Sample name. snvindel_vcf Path VCF SNVs INDELs. sv_vcf Path VCF SVs. cnv_tsv Path purple.cnv.somatic.tsv file. genome Human genome version (default: hg38. hg19 means GRCh37). snvoutdir Directory output SNV signature analysis results. sigsToUse COSMIC SNV signatures use. outpath File write HRDetect predictions disk (end '.gz'). specified, results written disk.","code":""},{"path":"https://umccr.github.io/sigrap/reference/hrdetect_run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run HRDetect via signature.tools.lib — hrdetect_run","text":"Tibble sample name HRD probability first two columns.","code":""},{"path":"https://umccr.github.io/sigrap/reference/hrdetect_run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run HRDetect via signature.tools.lib — hrdetect_run","text":"","code":"snvindel_vcf <- system.file(   \"extdata/umccrise/snv/somatic-ensemble-PASS.vcf.gz\",   package = \"gpgr\" ) sv_vcf <- system.file(\"extdata/umccrise/sv/manta.vcf.gz\", package = \"gpgr\") cnv_tsv <- system.file(\"extdata/purple/purple.cnv.somatic.tsv\", package = \"gpgr\") nm <- \"SampleA\" genome <- \"hg38\" snvoutdir <- tempdir() (res <- hrdetect_run(nm, snvindel_vcf, sv_vcf, cnv_tsv, genome, snvoutdir)) #> Bootstrap Signature Fits loaded from file #> [info HRDetect_pipeline] Single Nucleotide Variations #> [info HRDetect_pipeline] Structural Variants (Rearrangements) #> [info HRDetect_pipeline] Some samples in the input data_matrix do not have the exposures for SV3 and SV5, checking if the user supplied SV catalogues or BEDPE files for those samples. #> [info HRDetect_pipeline] Rearrangement signatures exposures will be estiamated for the following samples: SampleA #> [info HRDetect_pipeline] Running Signature fit with 100 bootstraps. Increase sparsity by removing exposures with 5% threshold of total mutations and 0.05 threshold of p-value, i.e. exposure of a signature in a sample is set to zero if the probability of having less than 5% of total mutations assigned to that signature is greather than 0.05. #> [info HRDetect_pipeline] Deletions at Micro-homology (Indels) #> [info HRDetect_pipeline] HRD-LOH index (CNV) #> [info HRDetect_pipeline] Computing HRDetect score and feature contributions for the following samples: SampleA #> [info HRDetect_pipeline] HRDetect pipeline completed! #> # A tibble: 1 × 9 #>   sample Probability intercept del.mh.prop  SNV3    SV3   SV5 hrdloh_index  SNV8 #>   <chr>        <dbl>     <dbl>       <dbl> <dbl>  <dbl> <dbl>        <dbl> <dbl> #> 1 Sampl…       0.807     -3.36        6.20  2.45 -0.877 -1.10        -1.95 0.085 # hrdetect_run(nm, snvindel_vcf, sv_vcf, cnv_tsv, genome, snvoutdir, #              outpath = \"nogit/hrdetect_results.json.gz\")"},{"path":"https://umccr.github.io/sigrap/reference/sig_contribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate COSMIC Signature Contribution — sig_contribution","title":"Calculate COSMIC Signature Contribution — sig_contribution","text":"Finds linear combination COSMIC (2015 2020) mutation signatures closely reconstructs SNV mutation matrix solving nonnegative least-squares constraints problem.","code":""},{"path":"https://umccr.github.io/sigrap/reference/sig_contribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate COSMIC Signature Contribution — sig_contribution","text":"","code":"sig_contribution(mut_mat, signatures)"},{"path":"https://umccr.github.io/sigrap/reference/sig_contribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate COSMIC Signature Contribution — sig_contribution","text":"mut_mat Mutation count matrix (dimensions: m rows (mutation types) X 1 column (sample)). signatures Signature matrix (dimensions: m rows (mutation types) X n columns (signatures))","code":""},{"path":"https://umccr.github.io/sigrap/reference/sig_contribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate COSMIC Signature Contribution — sig_contribution","text":"list COSMIC 2015 2020 signature contributions sample's signature.","code":""},{"path":"https://umccr.github.io/sigrap/reference/sig_contribution_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Create COSMIC Signature Table — sig_contribution_table","title":"Create COSMIC Signature Table — sig_contribution_table","text":"Creates COSMIC signature table display RMarkdown report.","code":""},{"path":"https://umccr.github.io/sigrap/reference/sig_contribution_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create COSMIC Signature Table — sig_contribution_table","text":"","code":"sig_contribution_table(contr, type, outdir = NULL)"},{"path":"https://umccr.github.io/sigrap/reference/sig_contribution_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create COSMIC Signature Table — sig_contribution_table","text":"contr tibble Rank, Signature, Contribution RelFreq columns. type One Sig (old COSMIC), SBS, DBS ID. outdir Relative directory write signature plots incorporating RMarkdown report.","code":""},{"path":"https://umccr.github.io/sigrap/reference/sig_contribution_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create COSMIC Signature Table — sig_contribution_table","text":"contr tibble additional Plot column pointing local path corresponding signature plot (markdown syntax). outdir = NULL (default), simply return contr tibble description signature.","code":""},{"path":"https://umccr.github.io/sigrap/reference/sig_count_dbs.html","id":null,"dir":"Reference","previous_headings":"","what":"Count DBS Contexts — sig_count_dbs","title":"Count DBS Contexts — sig_count_dbs","text":"Counts DBS Contexts.","code":""},{"path":"https://umccr.github.io/sigrap/reference/sig_count_dbs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count DBS Contexts — sig_count_dbs","text":"","code":"sig_count_dbs(vcf_gr)"},{"path":"https://umccr.github.io/sigrap/reference/sig_count_dbs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count DBS Contexts — sig_count_dbs","text":"vcf_gr GRanges containing mutation types single sample.","code":""},{"path":"https://umccr.github.io/sigrap/reference/sig_count_dbs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count DBS Contexts — sig_count_dbs","text":"tibble containing number DBS per COSMIC context per gr.","code":""},{"path":"https://umccr.github.io/sigrap/reference/sig_count_indel.html","id":null,"dir":"Reference","previous_headings":"","what":"Count INDEL Contexts — sig_count_indel","title":"Count INDEL Contexts — sig_count_indel","text":"Counts INDEL Contexts.","code":""},{"path":"https://umccr.github.io/sigrap/reference/sig_count_indel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count INDEL Contexts — sig_count_indel","text":"","code":"sig_count_indel(vcf_gr, ref_genome)"},{"path":"https://umccr.github.io/sigrap/reference/sig_count_indel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count INDEL Contexts — sig_count_indel","text":"vcf_gr GRanges containing mutation types single sample. ref_genome BSGenome reference genome use.","code":""},{"path":"https://umccr.github.io/sigrap/reference/sig_count_indel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count INDEL Contexts — sig_count_indel","text":"tibble containing number INDELs per COSMIC context per gr.","code":""},{"path":"https://umccr.github.io/sigrap/reference/sig_count_snv.html","id":null,"dir":"Reference","previous_headings":"","what":"Count SNV Contexts — sig_count_snv","title":"Count SNV Contexts — sig_count_snv","text":"Counts SNV Contexts.","code":""},{"path":"https://umccr.github.io/sigrap/reference/sig_count_snv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count SNV Contexts — sig_count_snv","text":"","code":"sig_count_snv(vcf_gr, ref_genome)"},{"path":"https://umccr.github.io/sigrap/reference/sig_count_snv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count SNV Contexts — sig_count_snv","text":"vcf_gr GRanges containing mutation types single sample. ref_genome BSGenome reference genome use.","code":""},{"path":"https://umccr.github.io/sigrap/reference/sig_count_snv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count SNV Contexts — sig_count_snv","text":"list two elements: snv_counts: matrix containing number SNVs per COSMIC context per gr. gr_snv: GRanges object containing SNVs.","code":""},{"path":"https://umccr.github.io/sigrap/reference/sig_plot_dbs.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot DBS Mutation Characteristics — sig_plot_dbs","title":"Plot DBS Mutation Characteristics — sig_plot_dbs","text":"Plots DBS mutation characteristics.","code":""},{"path":"https://umccr.github.io/sigrap/reference/sig_plot_dbs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot DBS Mutation Characteristics — sig_plot_dbs","text":"","code":"sig_plot_dbs(dbs_counts)"},{"path":"https://umccr.github.io/sigrap/reference/sig_plot_dbs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot DBS Mutation Characteristics — sig_plot_dbs","text":"dbs_counts DBS context counts.","code":""},{"path":"https://umccr.github.io/sigrap/reference/sig_plot_dbs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot DBS Mutation Characteristics — sig_plot_dbs","text":"list two ggplot2 objects: p_dbs_main: main DBS contexts. p_dbs_cont: DBS contexts.","code":""},{"path":"https://umccr.github.io/sigrap/reference/sig_plot_indel.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot INDEL Mutation Characteristics — sig_plot_indel","title":"Plot INDEL Mutation Characteristics — sig_plot_indel","text":"Plots INDEL mutation characteristics.","code":""},{"path":"https://umccr.github.io/sigrap/reference/sig_plot_indel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot INDEL Mutation Characteristics — sig_plot_indel","text":"","code":"sig_plot_indel(indel_counts)"},{"path":"https://umccr.github.io/sigrap/reference/sig_plot_indel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot INDEL Mutation Characteristics — sig_plot_indel","text":"indel_counts INDEL context counts.","code":""},{"path":"https://umccr.github.io/sigrap/reference/sig_plot_indel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot INDEL Mutation Characteristics — sig_plot_indel","text":"list two ggplot2 objects: p_indel_main: main INDEL contexts. p_indel_cont: INDEL contexts.","code":""},{"path":"https://umccr.github.io/sigrap/reference/sig_plot_snv.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot SNV Mutation Characteristics — sig_plot_snv","title":"Plot SNV Mutation Characteristics — sig_plot_snv","text":"Plots SNV mutation characteristics.","code":""},{"path":"https://umccr.github.io/sigrap/reference/sig_plot_snv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot SNV Mutation Characteristics — sig_plot_snv","text":"","code":"sig_plot_snv(gr_snv, snv_counts, ref_genome)"},{"path":"https://umccr.github.io/sigrap/reference/sig_plot_snv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot SNV Mutation Characteristics — sig_plot_snv","text":"gr_snv GRanges containing SNVs single sample. snv_counts matrix counts SNV contexts. ref_genome BSGenome reference genome use.","code":""},{"path":"https://umccr.github.io/sigrap/reference/sig_plot_snv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot SNV Mutation Characteristics — sig_plot_snv","text":"list four ggplot2 objects: p_heatmap: SNV mutation matrix heatmap. especially usefull looking wide mutational context. p_river: SNV mutation matrix riverplot. especially usefull looking wide mutational context. p_96_profile: relative contribution 96 trinucleotides. p_spectrum: point mutation spectrum.","code":""},{"path":"https://umccr.github.io/sigrap/reference/sig_workflow_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Run MutationalPatterns Workflow — sig_workflow_run","title":"Run MutationalPatterns Workflow — sig_workflow_run","text":"Runs MutationalPatterns Workflow.","code":""},{"path":"https://umccr.github.io/sigrap/reference/sig_workflow_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run MutationalPatterns Workflow — sig_workflow_run","text":"","code":"sig_workflow_run(vcf, sample_nm, ref_genome = \"hg38\", outdir)"},{"path":"https://umccr.github.io/sigrap/reference/sig_workflow_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run MutationalPatterns Workflow — sig_workflow_run","text":"vcf VCF file SNVs. sample_nm Sample name. ref_genome Human genome assembly string: hg38 (default), hg19 GRCh37. outdir Directory path output results .","code":""},{"path":"https://umccr.github.io/sigrap/reference/sig_workflow_run.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run MutationalPatterns Workflow — sig_workflow_run","text":"Writes plots signature contribution tables outdir.","code":""},{"path":"https://umccr.github.io/sigrap/reference/sigrap-package.html","id":null,"dir":"Reference","previous_headings":"","what":"sigrap: Wrappers for somatic mutation signature analysis tools — sigrap-package","title":"sigrap: Wrappers for somatic mutation signature analysis tools — sigrap-package","text":"Wraps functionality somatic signature analysis tools.","code":""},{"path":[]},{"path":"https://umccr.github.io/sigrap/reference/sigrap-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"sigrap: Wrappers for somatic mutation signature analysis tools — sigrap-package","text":"Maintainer: Peter Diakumis peterdiakumis@gmail.com (ORCID)","code":""},{"path":"https://umccr.github.io/sigrap/reference/tidyeval.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy eval helpers — tidyeval","title":"Tidy eval helpers — tidyeval","text":"https://www.tidyverse.org/blog/2019/06/rlang-0-4-0/","code":""},{"path":"https://umccr.github.io/sigrap/news/index.html","id":"sigrap-001-2021-12-22","dir":"Changelog","previous_headings":"","what":"sigrap 0.0.1 (2021-12-22)","title":"sigrap 0.0.1 (2021-12-22)","text":"Initial release. Moving signature tool wrappers (CHORD, HRDetect, MutationalPatterns) gpgr (https://github.com/umccr/gpgr).","code":""}]
